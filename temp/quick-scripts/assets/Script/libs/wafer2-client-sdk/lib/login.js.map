{"version":3,"sources":["login.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../../assets/Script/libs/wafer2-client-sdk/lib","sourcesContent":["import utils from './utils'\nimport constants from './constants';\nimport Session from './session';\n\n/***\n * @class\n * 表示登录过程中发生的异常\n */\nvar LoginError = (function () {\n    function LoginError(type, message) {\n        Error.call(this, message);\n        this.type = type;\n        this.message = message;\n    }\n\n    LoginError.prototype = new Error();\n    LoginError.prototype.constructor = LoginError;\n\n    return LoginError;\n})();\n\n/**\n * 微信登录，获取 code 和 encryptData\n */\nvar getWxLoginResult = function getLoginCode(callback) {\n    wx.login({\n        success: function (loginResult) {\n            wx.getUserInfo({\n                success: function (userResult) {\n                    callback(null, {\n                        code: loginResult.code,\n                        encryptedData: userResult.encryptedData,\n                        iv: userResult.iv,\n                        userInfo: userResult.userInfo,\n                    });\n                },\n\n                fail: function (userError) {\n                    var error = new LoginError(constants.ERR_WX_GET_USER_INFO, '获取微信用户信息失败，请检查网络状态');\n                    error.detail = userError;\n                    callback(error, null);\n                },\n            });\n        },\n\n        fail: function (loginError) {\n            var error = new LoginError(constants.ERR_WX_LOGIN_FAILED, '微信登录失败，请检查网络状态');\n            error.detail = loginError;\n            callback(error, null);\n        },\n    });\n};\n\nvar noop = function noop() {};\nvar defaultOptions = {\n    method: 'GET',\n    success: noop,\n    fail: noop,\n    loginUrl: null,\n};\n\n/**\n * @method\n * 进行服务器登录，以获得登录会话\n *\n * @param {Object} options 登录配置\n * @param {string} options.loginUrl 登录使用的 URL，服务器应该在这个 URL 上处理登录请求\n * @param {string} [options.method] 请求使用的 HTTP 方法，默认为 \"GET\"\n * @param {Function} options.success(userInfo) 登录成功后的回调函数，参数 userInfo 微信用户信息\n * @param {Function} options.fail(error) 登录失败后的回调函数，参数 error 错误信息\n */\nvar login = function login(options) {\n    options = utils.extend({}, defaultOptions, options);\n\n    if (!defaultOptions.loginUrl) {\n        options.fail(new LoginError(constants.ERR_INVALID_PARAMS, '登录错误：缺少登录地址，请通过 setLoginUrl() 方法设置登录地址'));\n        return;\n    }\n\n    var doLogin = () => getWxLoginResult(function (wxLoginError, wxLoginResult) {\n        if (wxLoginError) {\n            options.fail(wxLoginError);\n            return;\n        }\n        \n        var userInfo = wxLoginResult.userInfo;\n\n        // 构造请求头，包含 code、encryptedData 和 iv\n        var code = wxLoginResult.code;\n        var encryptedData = wxLoginResult.encryptedData;\n        var iv = wxLoginResult.iv;\n        var header = {};\n\n        header[constants.WX_HEADER_CODE] = code;\n        header[constants.WX_HEADER_ENCRYPTED_DATA] = encryptedData;\n        header[constants.WX_HEADER_IV] = iv;\n\n        // 请求服务器登录地址，获得会话信息\n        wx.request({\n            url: options.loginUrl,\n            header: header,\n            method: options.method,\n            data: options.data,\n            success: function (result) {\n                var data = result.data;\n\n                // 成功地响应会话信息\n                if (data && data.code === 0 && data.data.skey) {\n                    var res = data.data\n                    if (res.userinfo) {\n                        Session.set(res.skey);\n                        options.success(userInfo);\n                    } else {\n                        var errorMessage = '登录失败(' + data.error + ')：' + (data.message || '未知错误');\n                        var noSessionError = new LoginError(constants.ERR_LOGIN_SESSION_NOT_RECEIVED, errorMessage);\n                        options.fail(noSessionError);\n                    }\n\n                // 没有正确响应会话信息\n                } else {\n                    var noSessionError = new LoginError(constants.ERR_LOGIN_SESSION_NOT_RECEIVED, JSON.stringify(data));\n                    options.fail(noSessionError);\n                }\n            },\n\n            // 响应错误\n            fail: function (loginResponseError) {\n                var error = new LoginError(constants.ERR_LOGIN_FAILED, '登录失败，可能是网络错误或者服务器发生异常');\n                options.fail(error);\n            },\n        });\n    });\n\n    var session = Session.get();\n    if (session) {\n        wx.checkSession({\n            success: function () {\n                options.success(session.userInfo);\n            },\n\n            fail: function () {\n                Session.clear();\n                doLogin();\n            },\n        });\n    } else {\n        doLogin();\n    }\n};\n\nvar setLoginUrl = function (loginUrl) {\n    defaultOptions.loginUrl = loginUrl;\n};\n\nexport default {\n    LoginError: LoginError,\n    login: login,\n    setLoginUrl: setLoginUrl,\n};"]}